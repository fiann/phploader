{"majorversion": 2, "filemap": {"loader.php": {"classlist": ["PHP.YAHOO_util_Loader"], "name": "loader.php", "module": "phploader"}}, "modules": {"phploader": {"description": "Used to specify JavaScript and CSS module requirements.  It maintains a dependency\ntree for these modules so when a module is requested, all of the other modules it \ndepends on are included as well.  By default, the YUI Library is configured, and \nother modules and their dependencies can be added via PHP.", "submodules": [], "classlist": ["PHP.YAHOO_util_Loader"], "filelist": ["loader.php"], "subdata": {}, "name": "phploader"}}, "classmap": {"PHP.YAHOO_util_Loader": {"name": "PHP.YAHOO_util_Loader", "constructors": [{"params": [{"type": "string", "name": "yuiVersion", "description": " Defines which version of YUI metadata to load"}, {"type": "string", "name": "cacheKey", "description": " Unique APC cache key.  This is combined with the YUI base\nso that updates to YUI will force a new cache entry.  However, if your custom config \nchanges, this key should be changed (otherwise the old values will be used until the cache expires)."}, {"type": "array", "name": "modules", "description": " A list of custom modules"}, {"type": "boolean", "name": "noYUI", "description": " Pass true if you do not want the YUI metadata"}], "description": "The YAHOO_util_Loader class constructor"}], "namespace": "PHP", "module": "phploader", "methods": {"load": {"params": [{"type": "", "name": "string", "description": " $varname [, string $... ] List of component names"}], "description": "Used to load YUI and/or custom components"}, "getRemoteContent": {"return": {"type": "", "description": "raw source"}, "params": [{"type": "string", "name": "url", "description": " URL to fetch data from"}], "description": "Retrieve the contents of a remote resource"}, "accountFor": {"params": [{"type": "string", "name": "name", "description": " Module to mark as being accounted for"}], "description": "Markes a module as being accounted for.  Used in dependency testing."}, "listSatisfies": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "string", "name": "satisfied", "description": " Module name"}, {"type": "array", "name": "moduleList", "description": " List of modules names"}], "description": "Used to determine if one module is satisfied by provided array of modules"}, "getLoadedModules": {"return": {"type": "array", "description": ""}, "description": "Identifies what module(s) have been loaded via the load method and/or marked as loaded via the setLoaded method"}, "overrideBase": {"params": [{"type": "string", "name": "base", "description": " Base path (e.g.) 2.6.0/build"}, {"type": "array", "name": "modules", "description": " Module names of which to override base"}], "description": "Used to override the base dir for specific set of modules (Note: not supported when using the combo service)"}, "formatSkin": {"return": {"type": "string", "description": "prefixed skin name"}, "params": [{"type": "", "name": "string", "description": " $skin the skin name"}, {"type": "", "name": "string", "description": " $moduleName the name of a module"}], "description": "Add prefix to module skin"}, "raw": {"return": {"type": "string", "description": "Returns the raw JavaScript and/or CSS code inline without the actual style tags"}, "params": [{"type": "string", "name": "moduleType", "description": ""}, {"type": "boolean", "name": "allowRollups", "description": ""}, {"type": "boolean", "name": "skipSort", "description": ""}], "description": "Used to produce the raw Javacript and CSS code inline without the actual script or style tags", "guessedname": "moduleType", "guessedtype": "function"}, "loadSingle": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "", "name": "string", "description": " $name the name of a module to load"}], "description": "Loads the requested module"}, "getLink": {"return": {"type": "string", "description": "link or script include"}, "params": [{"type": "string", "name": "name", "description": " The module name to fetch the include for"}, {"type": "string", "name": "type", "description": " Resource type (i.e.) YUI_JS or YUI_CSS"}], "description": "Retrieve the link or script include for a given module name and resource type"}, "getProvides": {"return": {"type": "array", "description": ""}, "params": [{"type": "string", "name": "name", "description": " Module name"}], "description": "Identifies what module(s) are provided by a given module name (e.g.) yaho-dom-event provides yahoo, dom, and event"}, "script_json": {"return": {"type": "string", "description": "Returns a JSON object containing urls for each JavaScript component"}, "description": "Used to fetch a JSON object with the required JavaScript components"}, "processDependencies": {"return": {"type": "varies", "description": "output format based on requested outputType"}, "params": [{"type": "string", "name": "outputType", "description": " the format you like the response to be in"}, {"type": "string", "name": "moduleType", "description": " Type of module to return (i.e.) js or css"}, {"type": "boolean", "name": "skipSort", "description": ""}, {"type": "boolean", "name": "showLoaded", "description": ""}], "description": "Used to process the dependency list and retrieve the actual CSS and/or JavaScript resources\nin requested output format (e.g.) json, link/script nodes, embeddable code, php array, etc.", "guessedname": "skipSort", "guessedtype": "function"}, "log": {"params": [{"type": "string", "name": "msg", "description": " Message to write"}], "description": "General logging function.  Writes a message to the PHP error log."}, "script": {"return": {"type": "string", "description": ""}, "description": "Used to output each of the required script tags"}, "css_data": {"return": {"type": "array", "description": "Returns an array of data about each of the identified JavaScript components"}, "description": "Used to fetch an array of the required CSS components"}, "getLoadedModulesAsJSON": {"return": {"type": "json", "description": ""}, "description": "Identifies what module(s) have been loaded via the load method and/or marked as loaded via the setLoaded method"}, "addToCombo": {"params": [{"type": "string", "name": "name", "description": " The module name to add"}, {"type": "string", "name": "type", "description": " Resource type (i.e.) YUI_JS or YUI_CSS"}], "description": "Adds a module the combo collection for a specified resource type"}, "json": {"return": {"type": "string", "description": "Returns a JSON object with the required JavaScript and CSS components"}, "params": [{"type": "string", "name": "moduleType", "description": ""}, {"type": "boolean", "name": "allowRollups", "description": ""}, {"type": "boolean", "name": "skipSort", "description": ""}, {"type": "boolean", "name": "full", "description": ""}], "description": "Used to fetch a JSON object with the required JavaScript and CSS components", "guessedname": "moduleType", "guessedtype": "function"}, "skinSetup": {"return": {"type": "string", "description": ""}, "params": [{"type": "", "name": "string", "description": " $name module name"}], "description": "Sets up skin for skinnable modules"}, "getContent": {"return": {"type": "string", "description": "style or script node with embedded source"}, "params": [{"type": "string", "name": "name", "description": " The module name to fetch the source from"}, {"type": "string", "name": "type", "description": " Resource type (i.e.) YUI_JS or YUI_CSS"}], "description": "Retrieve the style or script node with embedded source for a given module name and resource type"}, "setProcessedModuleType": {"params": [{"type": "", "name": "string", "description": " $moduleType"}], "description": "Used to mark a module type as processed", "guessedname": "moduleType", "guessedtype": "function"}, "css": {"return": {"type": "string", "description": ""}, "description": "Used to output each of the required link tags"}, "getUrl": {"params": [{"type": "string", "name": "name", "description": " YUI component name"}], "description": "Retrieve the calculated url for the component in question"}, "getComboLink": {"return": {"type": "string", "description": "link or script include"}, "params": [{"type": "string", "name": "type", "description": " Resource type (i.e.) YUI_JS or YUI_CSS"}], "description": "Retrieves the combo link or script include for the currently loaded modules of a specific resource type"}, "css_json": {"return": {"type": "string", "description": "Returns a JSON object containing urls for each CSS component"}, "description": "Used to fetch a JSON object with the required CSS components"}, "tags": {"return": {"type": "string", "description": ""}, "params": [{"type": "string", "name": "moduleType", "description": " Type of html tag to return (i.e.) js or css.  Default is both."}, {"type": "boolean", "name": "skipSort", "description": ""}], "description": "Used to output each of the required html tags (i.e.) script or link", "guessedname": "moduleType", "guessedtype": "function"}, "parseSkin": {"return": {"type": "array", "description": ""}, "params": [{"type": "", "name": "string", "description": " $name the name of a module to parse"}], "description": "Parses a module's skin.  A modules skin is typically prefixed."}, "css_raw": {"return": {"type": "string", "description": "Returns the raw CSS code inline without the actual style tags"}, "description": "Used to produce the raw CSS code inline without the actual style tags"}, "getRaw": {"return": {"type": "string", "description": "raw source"}, "params": [{"type": "string", "name": "name", "description": " The module name you wish to fetch the source from"}], "description": "Retrieve the raw source contents for a given module name"}, "script_embed": {"return": {"type": "string", "description": "Returns the script tag(s) with the JavaScript inline"}, "description": "Used to embed the raw JavaScript inline"}, "clearComboLink": {"params": [{"type": "string", "name": "type", "description": " Resource type (i.e.) YUI_JS or YUI_CSS"}], "description": "Clears the combo url of already loaded modules for a specific resource type.  Prevents\nduplicate loading of modules if the page makes multiple calls to tags, css, or script."}, "sortDependencies": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "string", "name": "Module", "description": " name"}, {"type": "array", "name": "moduleList", "description": " List of modules names"}], "description": "Used to sort dependencies in the proper order (Note: only call this if the loader is dirty)", "guessedname": "skipSort", "guessedtype": "function"}, "getAllDependencies": {"return": {"type": "array", "description": ""}, "params": [{"type": "string", "name": "mname", "description": " Module name"}, {"type": "boolean", "name": "loadOptional", "description": " Load optional dependencies"}, {"type": "array", "name": "completed", "description": ""}], "description": "Identify dependencies for a give module name", "guessedname": "loadOptional", "guessedtype": "function"}, "data": {"return": {"type": "string", "description": ""}, "params": [{"type": "string", "name": "moduleType", "description": " Type of html tag to return (i.e.) js or css.  Default is both."}, {"type": "boolean", "name": "allowRollups", "description": ""}, {"type": "boolean", "name": "skipSort", "description": ""}], "description": "Used to output an Array which contains data about the required JavaScript & CSS components", "guessedname": "moduleType", "guessedtype": "function"}, "canJSON": {"return": {"type": "", "description": "boolean"}, "description": "Detects if environment supports JSON encode/decode"}, "script_raw": {"return": {"type": "string", "description": "Returns the raw JavaScript code inline without the actual script tags"}, "description": "Used to produce the raw JavaScript code inline without the actual script tags"}, "prune": {"return": {"type": "array", "description": ""}, "params": [{"type": "array", "name": "deps", "description": " List of module dependencies"}, {"type": "string", "name": "moduleType", "description": " Type of modules to prune (i.e.) js or css"}], "description": "Used during dependecy processing to prune modules from the list of modules requiring further processing"}, "hasProcessedModuleType": {"params": [{"type": "", "name": "string", "description": " $moduleType"}], "description": "Used to determine if a module type has been processed", "guessedname": "moduleType", "guessedtype": "function"}, "css_embed": {"return": {"type": "string", "description": "(e.g.) Returns the style tag(s) with the CSS inline"}, "description": "Used to embed the raw CSS"}, "updateCache": {"description": "Used to update the APC cache"}, "setLoaded": {"params": [{"type": "", "name": "string", "description": " $varname [, string $... ] List of module names"}], "description": "Used to specify modules that are already on the page that should not be loaded again"}, "checkThreshold": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "string", "name": "Module", "description": " name"}, {"type": "array", "name": "moduleList", "description": " List of modules names"}], "description": "Determine if rollup replacement threshold has been met"}, "getSuperceded": {"return": {"type": "array", "description": ""}, "params": [{"type": "string", "name": "name", "description": " Module name"}], "description": "Use to get a list of modules superseded by the given module name"}, "embed": {"return": {"type": "string", "description": "Returns the style tag(s) with the CSS inline and/or the script tag(s) with the JavaScript inline"}, "params": [{"type": "string", "name": "moduleType", "description": " Type of html tag to return (i.e.) js or css.  Default is both."}, {"type": "boolean", "name": "skipSort", "description": ""}], "description": "Used to output each of the required html tags inline (i.e.) script and/or style", "guessedname": "moduleType", "guessedtype": "function"}, "script_data": {"return": {"type": "array", "description": "Returns an array of data about each of the identified JavaScript components"}, "description": "Used to fetch an array of the required JavaScript components"}}, "file": "loader.php", "shortname": "YAHOO_util_Loader", "properties": {"processedModuleTypes": {"default": "", "type": "array", "description": "The first time we output a module type we allow automatic rollups, this\narray keeps track of module types we have processed", "guessedname": "processedModuleTypes", "guessedtype": "property"}, "jsComboLocation": {"default": "null", "type": "string", "description": "Holds the current combo url for the loaded JavaScript resources.  This is \nbuilt with addToCombo and retrieved with getComboLink.  Only used when the combine\nis enabled.", "guessedname": "jsComboLocation", "guessedtype": "property"}, "fullCacheKey": {"default": "null", "type": "string", "description": "The APC cache key", "guessedname": "fullCacheKey", "guessedtype": "property"}, "skins": {"default": "", "type": "array", "description": "The list of required skins", "guessedname": "skins", "guessedtype": "property"}, "filters": {"default": "", "type": "array", "description": "An array of filters & filter replacement rules.  Used with $filter.", "guessedname": "filters", "guessedtype": "property"}, "cacheFound": {"default": "false", "type": "boolean", "description": "Used to determine if we have an APC cache hit", "guessedname": "cacheFound", "guessedtype": "property"}, "loaded": {"default": "", "type": "array", "description": "List of modules that have been been outputted via getLink() / getComboLink()", "guessedname": "loaded", "guessedtype": "property"}, "superceded": {"default": "", "type": "array", "description": "List of all modules superceded by the list of required modules", "guessedname": "superceded", "guessedtype": "property"}, "rollupsToTop": {"default": "false", "type": "boolean", "description": "Force rollup modules to be sorted as moved to the top of\nthe stack when performing an automatic rollup.  This has a very small performance consequence.", "guessedname": "rollupsToTop", "guessedtype": "property"}, "loadOptional": {"default": "false", "type": "boolean", "description": "Whether or not to load optional dependencies for the requested modules", "guessedname": "loadOptional", "guessedtype": "property"}, "filterList": {"default": "null", "type": "array", "description": "A list of modules to apply the filter to.  If not supplied, all\nmodules will have any defined filters applied.  Tip: Useful for debugging.", "guessedname": "filterList", "guessedtype": "property"}, "combine": {"default": "false", "type": "boolean", "description": "Combined into a single request using the combo service to pontentially reduce the number of \nhttp requests required.  This option is not supported when loading custom modules.", "guessedname": "combine", "guessedtype": "property"}, "comboBase": {"default": "http://yui.yahooapis.com/combo?", "type": "string", "description": "The base path to the combo service.  Uses the Yahoo! CDN service by default.\nYou do not have to set this property to use the combine option. YUI PHP Loader ships \nwith an intrinsic, lightweight combo-handler as well (see combo.php).", "guessedname": "comboBase", "guessedtype": "property"}, "baseOverrides": {"default": "", "type": "array", "description": "List of modules that have had their base pathes overridden", "guessedname": "baseOverrides", "guessedtype": "property"}, "base": {"default": "http://yui.yahooapis.com/[YUI VERSION]/build/", "type": "string", "description": "The base directory", "guessedname": "base", "guessedtype": "property"}, "sorted": {"default": "null", "type": "array", "description": "List of sorted modules", "guessedname": "sorted", "guessedtype": "property"}, "accountedFor": {"default": "", "type": "array", "description": "List of modules the loader has aleady accounted for", "guessedname": "accountedFor", "guessedtype": "property"}, "undefined": {"default": "", "type": "array", "description": "Keeps track of modules that were requested that are not defined", "guessedname": "undefined", "guessedtype": "property"}, "allowRollups": {"default": "true", "type": "boolean", "description": "Should we allow rollups", "guessedname": "allowRollups", "guessedtype": "property"}, "modules": {"default": "YUI module metadata for the specified release", "type": "array", "description": "Contains the available module metadata", "guessedname": "modules", "guessedtype": "property"}, "filter": {"default": "empty string (minified vesion)", "type": "string (e.g.)", "description": "A filter to apply to result urls. This filter will modify the default path for \nall modules. The default path is the minified version of the files (e.g., event-min.js). \nChanging the filter alows for picking up the unminified (raw) or debug sources.\nThe default set of valid filters are:  YUI_DEBUG & YUI_RAW", "guessedname": "filter", "guessedtype": "property"}, "cssComboLocation": {"default": "null", "type": "string", "description": "Holds the current combo url for the loaded CSS resources.  This is \nbuilt with addToCombo and retrieved with getComboLink.  Only used when the combine\nis enabled.", "guessedname": "cssComboLocation", "guessedtype": "property"}, "dirty": {"default": "true", "type": "boolean", "description": "Used to determine if additional sorting of dependencies is required", "guessedname": "dirty", "guessedtype": "property"}, "requests": {"default": "", "type": "array", "description": "All required modules", "guessedname": "requests", "guessedtype": "property"}, "delayCache": {"default": "false", "type": "boolean", "description": "Used to delay caching of module data", "guessedname": "delayCache", "guessedtype": "property"}}, "description": "The YUI PHP loader base class which provides dynamic server-side loading for YUI"}}, "version": "1.0.0beta", "namespaces": ["PHP"]}